# 方法一：模拟

按小学加法模拟就行
特别要注意进位问题

* 

```
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* res = (struct ListNode*)malloc(sizeof(struct ListNode)); //哑结点
    struct ListNode* p = res;
    short int x = 0; //进位
    while (l1 && l2) { //l1与l2同时走
        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        p->next->val = (l1->val + l2->val + x) % 10; //模拟小学加法
        p->next->next = NULL;
        x = (l1->val + l2->val + x) >= 10; //更新进位
        l1 = l1->next;
        l2 = l2->next;
        p = p->next;
    }
    while (l1) { //l2走到尽头了，走l1
        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        p->next->val = (l1->val + x) % 10;  //同上
        p->next->next = NULL;
        x = (l1->val + x) >= 10;
        l1 = l1->next;
        p = p->next;
    }
    while (l2) { //l1走到尽头了，走l2
        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        p->next->val = (l2->val + x) % 10;  //同上
        p->next->next = NULL;
        x = (l2->val + x) >= 10;
        l2 = l2->next;
        p = p->next;
    }
    if (x) { //最后判断进位问题
        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        p->next->val = 1;
        p->next->next = NULL;
    }
    p = res->next;
    free(res); //删除哑结点
    return p;
}
```

**复杂度分析**
- 时间复杂度：O(max(M, N))，其中`M, N`分别为两个链表的长度
  总遍历次数取决于两个链表长度的最大值
- 空间复杂度：O(1)，返回值不计入空间复杂度

![image.png](https://pic.leetcode.cn/1688273522-dzxgEG-image.png)
